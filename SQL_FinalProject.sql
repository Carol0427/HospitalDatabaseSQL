--Health One Database!

-- DROP all tables
DROP TABLE HO_PRIMARY_DOCTOR_HISTORIES;
DROP TABLE HO_HOSPITAL_AFFILIATIONS;
DROP TABLE HO_PRESCRIPTIONS;
DROP TABLE HO_OFFICE_VISITS;
DROP TABLE HO_PATIENTS;
DROP TABLE HO_INSURANCES;
DROP TABLE HO_DOCTORS;
DROP TABLE HO_HOSPITALS;
DROP TABLE HO_DRUGS;

--DROP all indexes
DROP INDEX PATIENTS_LAST_NAME_IX;

--CREATE Insurances table
CREATE TABLE HO_INSURANCES
("INSURANCE_ID" NUMBER(10) CONSTRAINT "insurance_id_pk" PRIMARY KEY USING INDEX ENABLE,
"INSURANCE_COMPANY" VARCHAR2(40) CONSTRAINT "insurance_company_nn" NOT NULL ENABLE,
"PHONE" NUMBER(10) CONSTRAINT "insurance_phone_nn" NOT NULL ENABLE);

--CREATE Doctors table
CREATE TABLE HO_DOCTORS
(DOCTOR_ID NUMBER(5) CONSTRAINT doctor_id_pk PRIMARY KEY USING INDEX ENABLE,
FIRST_NAME VARCHAR2(20) CONSTRAINT doctor_first_name_nn NOT NULL,
LAST_NAME VARCHAR2(20) CONSTRAINT doctor_last_name NOT NULL,
ADDRESS VARCHAR2(30) CONSTRAINT doctor_address_nn NOT NULL,
PHONE NUMBER(10) CONSTRAINT doctor_phone_nn NOT NULL,
SPECIALIZATION VARCHAR2(15) CONSTRAINT doctor_specialization_nn NOT NULL
);

--CREATE Hospitals table
CREATE TABLE HO_HOSPITALS
(HOSPITAL_ID NUMBER(5) CONSTRAINT hospital_id_pk PRIMARY KEY USING INDEX ENABLE,
NAME VARCHAR2(30) CONSTRAINT hospital_name_nn NOT NULL,
ADDRESS VARCHAR2(30) CONSTRAINT hospital_address_nn NOT NULL,
PHONE VARCHAR2(10) CONSTRAINT hospital_phone_nn NOT NULL
);

--CREATE Patients table
CREATE TABLE HO_PATIENTS
(PATIENT_ID NUMBER(5) CONSTRAINT patient_id_pk PRIMARY KEY USING INDEX ENABLE,
INSURANCE_ID NUMBER(5),
DOCTOR_ID NUMBER(5) CONSTRAINT patient_doctor_id_fk_nn NOT NULL,
FIRST_NAME VARCHAR2(20) CONSTRAINT patient_first_name_nn NOT NULL,
LAST_NAME VARCHAR2(20) CONSTRAINT patient_last_name_nn NOT NULL,
ADDRESS VARCHAR2(60) CONSTRAINT patient_address_nn NOT NULL,
PHONE VARCHAR2(10) CONSTRAINT patient_phone_nn NOT NULL,
EMAIL VARCHAR2(40) CONSTRAINT patient_email_nn NOT NULL,
-- PATIENT_TYPE can either be a PH (policy holder), NPH (not policy holder), or NI (no insurance)
PATIENT_TYPE VARCHAR2(3) CONSTRAINT patients_patient_type_ck CHECK (PATIENT_TYPE IN('PH', 'NPH', 'NI')),
-- Policy holder is not unique because multiple people can be under the same insurance policy like in a family, so the holder for each person would be that one person who is the policy holder
POLICY_HOLDER VARCHAR2(30),
-- Each individual person has their own policy number so it has to be unique, makes sure no one is using someone else's policy
POLICY_NUMBER VARCHAR2(50) CONSTRAINT patient_policy_number_uq UNIQUE,
-- OTHER_PAYWAY is just in case they do not have insurance and are paying some other way, and you enter that into this column 
OTHER_PAYWAY VARCHAR2(50),
-- This check constraint checks so that we know who is the policy holder and who is not and who does not have a policy, makes sure that:
-- if someone is a holder, they don't have to enter policy holder name, because that's them, but they do have to enter their policy number
-- if someone is not a holder, they have to enter the policy holder name, their policy number, but not other
-- if someone does not have insurance, then they do not have to enter policy holder or policy number but do have to enter how they intend to pay
CHECK (PATIENT_TYPE IN('PH') AND INSURANCE_ID IS NOT NULL AND POLICY_HOLDER IS NULL AND POLICY_NUMBER IS NOT NULL AND OTHER_PAYWAY IS NULL
OR PATIENT_TYPE IN('NPH') AND INSURANCE_ID IS NOT NULL AND POLICY_HOLDER IS NOT NULL AND POLICY_NUMBER IS NOT NULL AND OTHER_PAYWAY IS NULL
OR PATIENT_TYPE IN('NI') AND INSURANCE_ID IS NULL AND POLICY_HOLDER IS NULL AND POLICY_NUMBER IS NULL AND OTHER_PAYWAY IS NOT NULL)
);

--EMAIL Constraint to make sure email entered is valid
ALTER TABLE HO_PATIENTS ADD CONSTRAINT patient_email_ck CHECK (EMAIL LIKE '%@%.com');

--CREATE Foreign Keys for PATIENTS table
--INSURANCE_ID FK
ALTER TABLE HO_PATIENTS ADD CONSTRAINT patient_insurance_fk FOREIGN KEY (INSURANCE_ID) 
	REFERENCES HO_INSURANCES(INSURANCE_ID) ENABLE;
--DOCTOR_ID FK
ALTER TABLE HO_PATIENTS ADD CONSTRAINT patient_doctor_fk FOREIGN KEY (DOCTOR_ID) 
	REFERENCES HO_DOCTORS(DOCTOR_ID) ENABLE;

--CREATE index for last_name column of patients table
CREATE INDEX PATIENTS_LAST_NAME_IX ON HO_PATIENTS(LAST_NAME);

--CREATE Primary Doctor History
CREATE TABLE HO_PRIMARY_DOCTOR_HISTORIES
(PRIM_DOC_HIST_ID NUMBER(5) CONSTRAINT prim_doc_hist_pk PRIMARY KEY USING INDEX ENABLE,
PATIENT_ID NUMBER(5) CONSTRAINT prim_doc_hist_pat_id_fk_nn NOT NULL,
DOCTOR_ID NUMBER(5) CONSTRAINT prim_doc_hist_doc_id_fk_pk_nn NOT NULL,
START_DATE DATE CONSTRAINT prim_doc_hist_start_date_nn NOT NULL,
END_DATE DATE CONSTRAINT prim_doc_hist_end_date_nn NOT NULL,
REASON_FOR_LEAVING VARCHAR2(50) CONSTRAINT prim_doc_hist_reason_nn NOT NULL
);

--CREATE Foreign Keys for PRIMARY DOCTOR HISTORIES table
--PATIENT_ID FK
ALTER TABLE HO_PRIMARY_DOCTOR_HISTORIES ADD CONSTRAINT prim_doc_hist_patient_fk FOREIGN KEY (PATIENT_ID) 
	REFERENCES HO_PATIENTS(PATIENT_ID) ENABLE;
--DOCTOR_ID FK
ALTER TABLE HO_PRIMARY_DOCTOR_HISTORIES ADD CONSTRAINT prim_doc_hist_doc_fk FOREIGN KEY (DOCTOR_ID) 
	REFERENCES HO_DOCTORS(DOCTOR_ID) ENABLE;


--CREATE Hospital Affiliations table
CREATE TABLE HO_HOSPITAL_AFFILIATIONS
(DATE_OF_AFFILIATION DATE CONSTRAINT hosp_affiliat_id_nn NOT NULL,
DOCTOR_ID NUMBER(5) CONSTRAINT hosp_affiliat_doc_id_nn NOT NULL,
HOSPITAL_ID NUMBER(5) CONSTRAINT hosp_affiliat_hosp_id_nn NOT NULL
);

--CREATE Foreign Keys for HOSPITAL AFFILIATIONS
--DOCTOR_ID FK
ALTER TABLE HO_HOSPITAL_AFFILIATIONS ADD CONSTRAINT hosp_affiliat_doctor_fk FOREIGN KEY (DOCTOR_ID) 
	REFERENCES HO_DOCTORS(DOCTOR_ID) ENABLE;
--HOSPITAL_ID
ALTER TABLE HO_HOSPITAL_AFFILIATIONS ADD CONSTRAINT hosp_affiliat_hosp_fk FOREIGN KEY (HOSPITAL_ID) 
	REFERENCES HO_HOSPITALS(HOSPITAL_ID) ENABLE;

--CREATE Drugs table
CREATE TABLE HO_DRUGS
(DRUG_ID NUMBER(5) CONSTRAINT drug_id_pk PRIMARY KEY USING INDEX ENABLE,
NAME VARCHAR2(10) CONSTRAINT drug_name_nn NOT NULL,
SIDE_EFFECTS VARCHAR2(50) CONSTRAINT drug_side_effects_nn NOT NULL,
BENEFITS VARCHAR2(50) CONSTRAINT drug_benefits_nn NOT NULL
);

--For prescription type, user has to enter either R for refillable or N for Non-Refillable
--CREATE Prescriptions table
CREATE TABLE HO_PRESCRIPTIONS
(RX_ID NUMBER(5) CONSTRAINT rx_id_pk PRIMARY KEY USING INDEX ENABLE,
DATE_PRESCRIBED DATE CONSTRAINT rx_date_rescription_nn NOT NULL,
DOSAGE VARCHAR2(10) CONSTRAINT rx_dosage_nn NOT NULL,
DURATION VARCHAR2(10) CONSTRAINT rx_duration_nn NOT NULL,
PRESCRIPTION_TYPE VARCHAR2(1) CONSTRAINT rx_type_ck CHECK (PRESCRIPTION_TYPE IN('R', 'N')),
REASON VARCHAR(50),
NUM_OF_REFILLS NUMBER(3),
COMMENTS VARCHAR2(100),
DOCTOR_ID NUMBER(5) CONSTRAINT rx_doctor_id_fk_nn NOT NULL,
DRUG_ID NUMBER(5) CONSTRAINT rx_drug_id_fk_nn NOT NULL,
PATIENT_ID NUMBER(5) CONSTRAINT rx_patient_id_fk_nn NOT NULL,
--If RX_TYPE is 'R' then NUM_OF_REFILLS must be entered, COMMENTS is still optional but REASON column must be NULL because that is from NON-REFILLABLE RX
--IF RX_TYPE is 'N' then REASONS MUST be entered, but NUM_OF_REFILLS and COMMENTS must be NULL because they are from a REFILLABLE prescription
CHECK (PRESCRIPTION_TYPE IN('R') AND PRESCRIPTION_TYPE IS NOT NULL AND NUM_OF_REFILLS IS NOT NULL AND REASON IS NULL 
OR PRESCRIPTION_TYPE IN('N') AND PRESCRIPTION_TYPE IS NOT NULL AND REASON IS NOT NULL AND NUM_OF_REFILLS IS NULL AND COMMENTS IS NULL)
);

--CREATE PRESCRIPTIONS table
--DOCTOR_ID FK
ALTER TABLE HO_PRESCRIPTIONS ADD CONSTRAINT rx_doctor_fk FOREIGN KEY (DOCTOR_ID)
	REFERENCES HO_DOCTORS (DOCTOR_ID) ENABLE;
--DRUG_ID FK
ALTER TABLE HO_PRESCRIPTIONS ADD CONSTRAINT rx_drug_fk FOREIGN KEY (DRUG_ID) 
	REFERENCES HO_DRUGS (DRUG_ID) ENABLE;
--PATIENT_ID
ALTER TABLE HO_PRESCRIPTIONS ADD CONSTRAINT rx_patient_fk FOREIGN KEY (PATIENT_ID) 
	REFERENCES HO_PATIENTS (PATIENT_ID) ENABLE;


--CREATE OFFICE VISITS table
CREATE TABLE HO_OFFICE_VISITS
(PATIENT_ID NUMBER(5),
DOCTOR_ID NUMBER(5),
DATE_OF_VISIT DATE,
SYMPTOMS VARCHAR2(50),
--A user must enter either I for Initial Diagnosis, F for Follow Up, R for Routine, or O for Other type of visit
OFFICE_VISIT_TYPE VARCHAR2(1) CONSTRAINT office_visit_type_ck CHECK (OFFICE_VISIT_TYPE IN('I', 'F', 'R', 'O')),
INITIAL_DIAGNOSIS VARCHAR(50),
DIAGNOSIS_STATUS VARCHAR2(50),
BLOOD_PRESSURE VARCHAR2(10),
HEIGHT VARCHAR2(10),
WEIGHT VARCHAR2(10),
DIAGNOSIS VARCHAR2(50),
OTHER VARCHAR2(50),
--Now subtypes work, if one OFFICE_VISIT_TYPE is chosen then the other columns can't be entered
--If OFFICE_VISIT_TYPE IS 'I' then the INITIAL_DIAGNOSIS column must be filled in and the other columns must be null
--If OFFICE_VISIT_TYPE IS 'D' then DIAGNOSIS_STATUS column must be filled in and the other columns must be null
--If OFFICE_VISIT_TYPE IS 'F' then BLOOD_PRESSURE column must be filled in, HEIGHT column must be filled in, WEIGHT must be filled in, and DIAGNOSIS is still optional and the rest must be null
--If OFFICE_VISIT_TYPE IS 'O' then OTHER column must be filled in and the rest must be null
CHECK (OFFICE_VISIT_TYPE IN('I') AND OFFICE_VISIT_TYPE IS NOT NULL AND INITIAL_DIAGNOSIS IS NOT NULL AND DIAGNOSIS_STATUS IS NULL AND BLOOD_PRESSURE IS NULL AND HEIGHT IS NULL AND WEIGHT IS NULL AND DIAGNOSIS IS NULL 
OR OFFICE_VISIT_TYPE IN('F') AND OFFICE_VISIT_TYPE IS NOT NULL AND INITIAL_DIAGNOSIS IS NULL AND DIAGNOSIS_STATUS IS NOT NULL AND BLOOD_PRESSURE IS NULL AND HEIGHT IS NULL AND WEIGHT IS NULL AND DIAGNOSIS IS NULL 
OR OFFICE_VISIT_TYPE IN('R') AND OFFICE_VISIT_TYPE IS NOT NULL AND INITIAL_DIAGNOSIS IS NULL AND DIAGNOSIS_STATUS IS NULL AND BLOOD_PRESSURE IS NOT NULL AND HEIGHT IS NOT NULL AND WEIGHT IS NOT NULL AND DIAGNOSIS IS NOT NULL 
OR OFFICE_VISIT_TYPE IN('O') AND OFFICE_VISIT_TYPE IS NOT NULL AND INITIAL_DIAGNOSIS IS NULL AND DIAGNOSIS_STATUS IS NULL AND BLOOD_PRESSURE IS NULL AND HEIGHT IS NULL AND WEIGHT IS NULL AND DIAGNOSIS IS NULL AND OTHER IS NOT NULL),
CONSTRAINT office_visit_comp_pk PRIMARY KEY (PATIENT_ID, DOCTOR_ID, DATE_OF_VISIT)
);

--CREATE Foreign Keys for OFFICE VISTS
--PATIENT_ID FK
ALTER TABLE HO_OFFICE_VISITS ADD CONSTRAINT "office_visit_patient_fk" FOREIGN KEY ("PATIENT_ID")
	REFERENCES HO_PATIENTS ("PATIENT_ID") ENABLE;
--DOCTOR_ID FK
ALTER TABLE HO_OFFICE_VISITS ADD CONSTRAINT "office_visit_doctor_fk" FOREIGN KEY ("DOCTOR_ID")
	REFERENCES HO_DOCTORS (DOCTOR_ID) ENABLE;


--DROP all the Sequences
DROP SEQUENCE INSURANCE_SEQ;
DROP SEQUENCE PATIENT_SEQ;
DROP SEQUENCE PRIMARY_DOCTOR_HISTORY_SEQ;
DROP SEQUENCE DOCTOR_SEQ;
DROP SEQUENCE HOSPITAL_SEQ;
DROP SEQUENCE PRESCRIPTION_SEQ;
DROP SEQUENCE DRUG_SEQ;

--CREATE Sequence for INSURANCES PK
CREATE SEQUENCE INSURANCE_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOMINVALUE
NOCYCLE
NOCACHE;

--CREATE Sequence for PATIENTS PK
CREATE SEQUENCE PATIENT_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOMINVALUE
NOCYCLE
NOCACHE;

--CREATE Sequence for PRIMARY DOCTOR HISTORIES ID
CREATE SEQUENCE PRIMARY_DOCTOR_HISTORY_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOMINVALUE
NOCYCLE
NOCACHE;

--CREATE Sequence for DOCTORS ID
CREATE SEQUENCE DOCTOR_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOMINVALUE
NOCYCLE
NOCACHE;

--CREATE Sequence for HOSPITALS ID
CREATE SEQUENCE HOSPITAL_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOMINVALUE
NOCYCLE
NOCACHE;

--CREATE Sequence for PRESCRIPTIONS ID
CREATE SEQUENCE PRESCRIPTION_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOMINVALUE
NOCYCLE
NOCACHE;

--CREATE Sequence for DRUGS ID
CREATE SEQUENCE DRUG_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOMINVALUE
NOCYCLE
NOCACHE;

--INSERT values into INSURANCES table
INSERT INTO HO_INSURANCES 
(INSURANCE_ID, INSURANCE_COMPANY, PHONE)
VALUES (INSURANCE_SEQ.NEXTVAL, 'Florida Sunshine', '5616742382');
INSERT INTO HO_INSURANCES
(INSURANCE_ID, INSURANCE_COMPANY, PHONE)
VALUES (INSURANCE_SEQ.NEXTVAL, 'ABC Insurance', '8005611111');
INSERT INTO HO_INSURANCES
(INSURANCE_ID, INSURANCE_COMPANY, PHONE)
VALUES (INSURANCE_SEQ.NEXTVAL, 'MJ Institute for Health', '5619291237');

--INSERT values into DOCTORS table
INSERT INTO HO_DOCTORS
(DOCTOR_ID, FIRST_NAME, LAST_NAME, ADDRESS, PHONE, SPECIALIZATION)
VALUES (DOCTOR_SEQ.NEXTVAL, 'Thor', 'KingOfAsgard', 'Asgard', 5618002345, 'Neurology');
INSERT INTO HO_DOCTORS
(DOCTOR_ID, FIRST_NAME, LAST_NAME, ADDRESS, PHONE, SPECIALIZATION)
VALUES (DOCTOR_SEQ.NEXTVAL, 'Steve', 'Rogers', 'Conneticut', 8005611111, 'Check-ups');
INSERT INTO HO_DOCTORS
(DOCTOR_ID, FIRST_NAME, LAST_NAME, ADDRESS, PHONE, SPECIALIZATION)
VALUES (DOCTOR_SEQ.NEXTVAL, 'Tony', 'Stark', 'New York', 8005616743, 'Surgeon');

--INSERT values into PATIENTS table
INSERT INTO HO_PATIENTS
(PATIENT_ID, INSURANCE_ID, DOCTOR_ID, FIRST_NAME, LAST_NAME, ADDRESS, PHONE, EMAIL, PATIENT_TYPE, POLICY_NUMBER)
VALUES (PATIENT_SEQ.NEXTVAL, 1, 1, 'Bruce', 'Banner', '9355 SW 8th St. Apt. 100, Boca Raton, Fl. 33428', 8001234567, 'da_hulk_is_her@yahoo.com', 'PH', '123456789');
INSERT INTO HO_PATIENTS
(PATIENT_ID, INSURANCE_ID, DOCTOR_ID, FIRST_NAME, LAST_NAME, ADDRESS, PHONE, EMAIL, PATIENT_TYPE, POLICY_HOLDER, POLICY_NUMBER)
VALUES (PATIENT_SEQ.NEXTVAL, 2, 1, 'Wanda', 'Maximoff', '9355 SW 8th St. Apt. 101, Boca Raton, Fl. 33428', 5616749080, 'natasharomanoff3608@gmail.com', 'NPH', 'Magneto', '123456787');
INSERT INTO HO_PATIENTS
(PATIENT_ID, DOCTOR_ID, FIRST_NAME, LAST_NAME, ADDRESS, PHONE, EMAIL, PATIENT_TYPE, OTHER_PAYWAY)
VALUES (PATIENT_SEQ.NEXTVAL, 3, 'Peter', 'Parker', '9355 SW 8th St. Apt. 102, Boca Raton, Fl. 33428', 5619291234, 'starkindustries@gmail.com', 'NI', 'Credit Card');

--INSERT values into PRIMARY DOCTOR HISTORIES table
INSERT INTO HO_PRIMARY_DOCTOR_HISTORIES
(PRIM_DOC_HIST_ID, PATIENT_ID, DOCTOR_ID, START_DATE, END_DATE, REASON_FOR_LEAVING)
VALUES (PRIMARY_DOCTOR_HISTORY_SEQ.NEXTVAL, 1, 1, TO_DATE('04-27-2003', 'MM-DD-YYYY'), TO_DATE('05-24-2010', 'MM-DD-YYYY'), 'Insurance stopped covering last doctor');
INSERT INTO HO_PRIMARY_DOCTOR_HISTORIES
(PRIM_DOC_HIST_ID, PATIENT_ID, DOCTOR_ID, START_DATE, END_DATE, REASON_FOR_LEAVING)
VALUES (PRIMARY_DOCTOR_HISTORY_SEQ.NEXTVAL, 2, 2, TO_DATE('12-23-2015', 'MM-DD-YYYY'), TO_DATE('12-23-2020', 'MM-DD-YYYY'), 'Moved to new location, other doctor too far');
INSERT INTO HO_PRIMARY_DOCTOR_HISTORIES
(PRIM_DOC_HIST_ID, PATIENT_ID, DOCTOR_ID, START_DATE, END_DATE, REASON_FOR_LEAVING)
VALUES (PRIMARY_DOCTOR_HISTORY_SEQ.NEXTVAL, 3, 3, TO_DATE('08-17-2012', 'MM-DD-YYYY'), TO_DATE('09-17-2014', 'MM-DD-YYYY'), 'Insurance covers new doctor');

--INSERT values into HOSPITALS table
INSERT INTO HO_HOSPITALS
(HOSPITAL_ID, NAME, ADDRESS, PHONE)
VALUES (HOSPITAL_SEQ.NEXTVAL, 'St. Jude Hospital', 'Florida', 800234567);
INSERT INTO HO_HOSPITALS
(HOSPITAL_ID, NAME, ADDRESS, PHONE)
VALUES (HOSPITAL_SEQ.NEXTVAL, 'Broward Central', 'Florida', 5612980345);
INSERT INTO HO_HOSPITALS
(HOSPITAL_ID, NAME, ADDRESS, PHONE)
VALUES (HOSPITAL_SEQ.NEXTVAL, 'Broward North', 'Florida', 5619291234);

--INSERT values into HOSPITAL AFFILIATIONS table
INSERT INTO HO_HOSPITAL_AFFILIATIONS
(DATE_OF_AFFILIATION, DOCTOR_ID, HOSPITAL_ID)
VALUES (TO_DATE('05-13-2020', 'MM-DD-YYYY'), 1, 1);
INSERT INTO HO_HOSPITAL_AFFILIATIONS
(DATE_OF_AFFILIATION, DOCTOR_ID, HOSPITAL_ID)
VALUES (TO_DATE('04-29-2020', 'MM-DD-YYYY'), 2, 2);
INSERT INTO HO_HOSPITAL_AFFILIATIONS
(DATE_OF_AFFILIATION, DOCTOR_ID, HOSPITAL_ID)
VALUES (TO_DATE('03-14-2012', 'MM-DD-YYYY'), 3, 3);

--INSERT values into DRUGS table
INSERT INTO HO_DRUGS
(DRUG_ID, NAME, SIDE_EFFECTS, BENEFITS)
VALUES (DRUG_SEQ.NEXTVAL, 'Nexxus', 'crazy legs, gumption, unstoppable urge to dance', 'sunshine');
INSERT INTO HO_DRUGS
(DRUG_ID, NAME, SIDE_EFFECTS, BENEFITS)
VALUES (DRUG_SEQ.NEXTVAL, 'Advil', 'finger shrinking, chatty kathy syndrome, cancer', 'stops headaches');
INSERT INTO HO_DRUGS
(DRUG_ID, NAME, SIDE_EFFECTS, BENEFITS)
VALUES (DRUG_SEQ.NEXTVAL, 'Benedryl', 'laser eyes, temporary weightlessness, youth', 'helps bruises heal faster');

--INSERT values into PRESCRIPTIONS table
INSERT INTO HO_PRESCRIPTIONS
(RX_ID, DATE_PRESCRIBED, DOSAGE, DURATION, PRESCRIPTION_TYPE, NUM_OF_REFILLS, DOCTOR_ID, DRUG_ID, PATIENT_ID)
VALUES (PRESCRIPTION_SEQ.NEXTVAL, TO_DATE('05-12-2020', 'MM-DD-YYYY'), '5mg', '6 months', 'R', 3, 1, 1, 1);
INSERT INTO HO_PRESCRIPTIONS
(RX_ID, DATE_PRESCRIBED, DOSAGE, DURATION, PRESCRIPTION_TYPE, NUM_OF_REFILLS, COMMENTS, DOCTOR_ID, DRUG_ID, PATIENT_ID)
VALUES (PRESCRIPTION_SEQ.NEXTVAL, TO_DATE('05-11-2020', 'MM-DD-YYYY'), '10mg', '1 month', 'R', 2, 'Must not surpass 2 times a month or else head will explode!', 2,2, 2);
INSERT INTO HO_PRESCRIPTIONS
(RX_ID, DATE_PRESCRIBED, DOSAGE, DURATION, PRESCRIPTION_TYPE, REASON, DOCTOR_ID, DRUG_ID, PATIENT_ID)
VALUES (PRESCRIPTION_SEQ.NEXTVAL, TO_DATE('05-10-2020', 'MM-DD-YYYY'), '8mg', '3 months', 'N', 'one prescription has plenty enough for 3 months', 3, 3, 3);

--INSERT values into OFFICE VISITS table
INSERT INTO HO_OFFICE_VISITS
(PATIENT_ID, DOCTOR_ID, DATE_OF_VISIT, SYMPTOMS, OFFICE_VISIT_TYPE, INITIAL_DIAGNOSIS)
VALUES (1, 1, TO_DATE('06-04-2020', 'MM-DD-YYYY'), 'coughing, sneezing, shortness of breath', 'I', 'A short sickness/fever');
INSERT INTO HO_OFFICE_VISITS
(PATIENT_ID, DOCTOR_ID, DATE_OF_VISIT, SYMPTOMS, OFFICE_VISIT_TYPE, DIAGNOSIS_STATUS)
VALUES (2, 2, TO_DATE('07-04-2020', 'MM-DD-YYYY'), 'blue face, numbness in hair, spasming toes', 'F', 'completed');
INSERT INTO HO_OFFICE_VISITS
(PATIENT_ID, DOCTOR_ID, DATE_OF_VISIT, SYMPTOMS, OFFICE_VISIT_TYPE, BLOOD_PRESSURE, HEIGHT, WEIGHT, DIAGNOSIS)
VALUES (3, 3, TO_DATE('08-04-2020', 'MM-DD-YYYY'), 'crazy legs, too much funk in soul, thirsty', 'R', '120/80', '5ft 6in', '140 lb.', 'Perfectly healthy');

--DROP all views
DROP VIEW WHICH_PATIENTS_HAVE_THOR;
DROP VIEW NUMBER_OF_PATIENTS;

--CREATE view to see which patients have Thor as a doctor
CREATE VIEW WHICH_PATIENTS_HAVE_THOR AS
SELECT P.FIRST_NAME AS "Patient Name", P.EMAIL AS "Patient Email", D.FIRST_NAME AS "Doctor Name" 
FROM HO_PATIENTS P JOIN HO_DOCTORS D
USING (DOCTOR_ID)
WHERE D.FIRST_NAME = 'Thor';

--CREATE view to see number of patients in hospital
CREATE VIEW NUMBER_OF_PATIENTS AS 
SELECT COUNT(PATIENT_ID) AS "NUMBER OF PATIENTS IN HOSPITAL"
FROM HO_PATIENTS;

--DROP all synonyms
DROP SYNONYM PRIM_DOC_HIST;

--CREATE synonym for PRIMARY DOCTOR HISTORIES table to shortn to PRIM_DOC_HIST
CREATE SYNONYM PRIM_DOC_HIST
FOR HO_PRIMARY_DOCTOR_HISTORIES;

--DESCRIBE Health One DB tables
--DESCRIBE HO_PATIENTS;
--DESCRIBE HO_DOCTORS;
--DESCRIBE HO_INSURANCES;
--DESCRIBE HO_HOSPITALS;
--DESCRIBE HO_PRESCRIPTIONS;
--DESCRIBE HO_DRUGS;
--DESCRIBE HO_HOSPITAL_AFFIIATIONS;
--DESCRIBE HO_OFFICE_VISITS;
--DESCRIBE HO_PRIMARY_DOCTOR_HISTORIES;